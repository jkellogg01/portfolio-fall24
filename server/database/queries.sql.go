// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTokenPair = `-- name: CreateTokenPair :one
INSERT INTO spotify_token_pair (
  access_token, refresh_token, expires_at, scope
) VALUES (
  $1, $2, $3, $4
) RETURNING id, access_token, refresh_token, scope, created_at, expires_at
`

type CreateTokenPairParams struct {
	AccessToken  string           `json:"access_token"`
	RefreshToken string           `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
	Scope        pgtype.Text      `json:"scope"`
}

func (q *Queries) CreateTokenPair(ctx context.Context, arg CreateTokenPairParams) (SpotifyTokenPair, error) {
	row := q.db.QueryRow(ctx, createTokenPair,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.Scope,
	)
	var i SpotifyTokenPair
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.Scope,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getTokenPair = `-- name: GetTokenPair :one
SELECT access_token, refresh_token, expires_at
FROM spotify_token_pair
GROUP BY created_at, access_token, refresh_token, expires_at
LIMIT 1
`

type GetTokenPairRow struct {
	AccessToken  string           `json:"access_token"`
	RefreshToken string           `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) GetTokenPair(ctx context.Context) (GetTokenPairRow, error) {
	row := q.db.QueryRow(ctx, getTokenPair)
	var i GetTokenPairRow
	err := row.Scan(&i.AccessToken, &i.RefreshToken, &i.ExpiresAt)
	return i, err
}
